---
import { Icon } from 'astro-icon/components';

const inputTags: string[] = ['Доставка и оплата', 'Нужна помощь с выбором', 'Индивидуальный заказ'];
---

<div class='input-header' data-component='header-input'>
  <div class='input-header__field'>
    <Icon class='input-header__icon' name='stars' />
    <input class='input-header__input input' type='text' />
    <p class='input-header__label input'>
      <span class='input-header__label_first'>Найти или задать вопрос...</span>
      <span class='input-header__label_second'>среднее время ответа 15 секунд</span>
    </p>
  </div>
  <div class='input-header__tags'>
    {
      inputTags.map((tag) => (
        <button class='input-header__tag' data-overflow-element>
          {tag}
        </button>
      ))
    }
  </div>
</div>

<style lang='scss'>
  .input {
    font-family: var(--font-secondary);
    font-weight: 500;
    font-size: 12px;
    line-height: 16px;

    @include media('md') {
      font-size: 13px;
    }

    @include media('xl') {
      font-size: 14px;
    }
  }

  .input-header {
    position: relative;
    padding: 6px;
    border-radius: 8px;
    background-color: var(--light);
    flex-grow: 1;

    @include media('md') {
      padding: 8px;
    }

    @include media('lg') {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: 12px;
    }

    @include media('xl') {
      padding: 10px;
      gap: 26px;
      height: 88px;
    }

    &__field {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    &__icon {
      color: var(--primary);
      width: 24px;
      height: 16px;

      flex-shrink: 0;
      flex-grow: 0;
    }

    &__input {
      width: 100%;
      background-color: transparent;
      display: none;

      .active & {
        display: block;
      }

      &::placeholder {
        color: var(--light-3);
      }
    }

    &__label {
      cursor: text;
      color: var(--light-3);
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 4px;
      width: 100%;

      .active & {
        display: none;
      }

      &_first {
        font-size: 12px;
        line-height: 16px;

        @include media('md') {
          font-size: 13px;
        }

        @include media('lg') {
          font-size: 14px;
        }
      }

      &_second {
        display: none;
        line-height: 16px;

        @include media('md') {
          display: block;
          font-size: 10px;
        }

        @include media('lg') {
          font-size: 13px;
        }

        @include media('xl') {
          font-size: 11px;
        }
      }
    }

    &__tags {
      display: none;

      @include media('lg') {
        display: flex;
        gap: 6px;
      }
    }

    &__tag {
      flex-grow: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
      background-color: var(--white);
      padding: 5px 8px;
      white-space: nowrap;

      font-family: var(--font-secondary);
      font-size: 14px;
      letter-spacing: calc(14px * -0.02);
      color: var(--secondary);
      transition: color 0.3s ease-in-out;

      &:hover {
        color: var(--primary);
      }
    }
  }
</style>

<script>
  import { overflowItems } from '@/utils/styles';

  const inputWrapper = document.querySelector<HTMLDivElement>("[data-component='header-input']");
  const input = inputWrapper?.querySelector<HTMLInputElement>('input');

  input?.addEventListener('blur', () => {
    if (!input.value.length) {
      inputWrapper?.classList.remove('active');
    }
  });

  inputWrapper?.addEventListener('click', () => {
    inputWrapper?.classList.add('active');
    input?.focus();
  });

  document.querySelectorAll<HTMLButtonElement>('.input-header__tag').forEach((tag) =>
    tag.addEventListener('click', (e) => {
      e.stopPropagation();
    })
  );

  const tagsContainer = inputWrapper?.querySelector<HTMLElement>('.input-header__tags');
  if (tagsContainer) {
    overflowItems(tagsContainer);
    window.addEventListener('resize', () => overflowItems(tagsContainer));
  }
</script>
