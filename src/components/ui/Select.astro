---
import { Icon } from 'astro-icon/components';

interface ISelectOption {
  label: string;
  isActive: boolean;
}

const items1: ISelectOption[] = [
  { label: 'Популярности', isActive: false },
  { label: 'Возрастанию цены', isActive: false },
  { label: 'Убыванию цены', isActive: false },
];
const items2: ISelectOption[] = [
  { label: 'Теплоте', isActive: true },
  { label: 'Шуршанию', isActive: false },
  { label: 'Влагозащите', isActive: false },
  { label: 'Дышащести', isActive: false },
];
---

<div class='select' data-component='select'>
  <div class='select__trigger'>
    <div class='select__trigger-text'>
      <span>Сортировать:</span> По популярности
    </div>
    <Icon name='arrow-down' />
  </div>
  <div class='select__drawer select-drawer' data-component='select-drawer'>
    <div class='select-drawer__header'>
      <button class='select-drawer__button' data-action='close'>
        <span>Закрыть</span>
        <Icon name='close' />
      </button>
    </div>
    <div class='select-drawer__content'>
      <div class='select-drawer__title'>
        Сортировать: <span>По Теплоте</span>
      </div>
      <div class='select-drawer__items'>
        {
          items1.map(({ label, isActive }) => (
            <div class:list={['select-drawer__item', { active: isActive }]}>
              <button class='select-drawer__item-radio' />
              <div>{label}</div>
            </div>
          ))
        }
      </div>
      <div class='select-drawer__label'>
        Умная сортировка <br />
        Выбирайте не только по цене, но и по ощущениям:
      </div>
      <div class='select-drawer__items'>
        {
          items2.map(({ label, isActive }) => (
            <div class:list={['select-drawer__item', { active: isActive }]}>
              <button class='select-drawer__item-radio' />
              <div>{label}</div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</div>

<style lang='scss'>
  .select {
    &__trigger {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
      padding: 4px 12px;
      background-color: transparent;
      border-radius: 8px;
      @include border(1px, var(--light-2));
      height: 32px;

      svg {
        color: var(--secondary);
        width: 6px;
        height: 4px;
      }

      @include media('xl') {
        height: 40px;
      }
    }

    &__trigger-text {
      color: var(--secondary);
      font-weight: 800;
      font-size: 12px;
      text-transform: uppercase;

      span {
        color: var(--primary);
      }

      @include media('lg') {
        font-size: 14px;
      }

      @include media('xl') {
        font-size: 16px;
      }
    }

    &__drawer {
      transform: translateY(100%);
      transition: transform 0.3s ease-in-out;

      &.opened {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        z-index: 100;
        background-color: var(--white);
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
        padding: 12px;
        transform: translateY(0);
      }

      @include media('md') {
        display: none;
      }
    }
  }

  .select-drawer {
    &__header {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      margin-bottom: 16px;
    }

    &__button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 2px 8px;
      height: 28px;
      background-color: var(--light);
      border-radius: 8px;

      font-family: var(--font-primary);
      color: var(--secondary);
      font-weight: 800;
      font-size: 12px;
      text-transform: uppercase;

      svg {
        width: 9px;
        height: 8px;
        transform: translateY(-1px);
      }
    }

    &__content {
      padding: 0 4px 24px;
    }

    &__title {
      font-weight: 900;
      font-style: italic;
      font-size: 16px;
      text-transform: uppercase;
      color: var(--secondary);
      margin-bottom: 13px;

      span {
        color: var(--primary);
      }
    }

    &__label {
      padding: 4px 0 4px 32px;
      font-family: var(--font-secondary);
      font-style: italic;
      font-size: 12px;
      text-transform: lowercase;
      color: var(--secondary);

      margin-bottom: 10px;
    }

    &__items {
      display: flex;
      flex-direction: column;
      gap: 4px;

      font-size: 12px;
      font-weight: 800;
      text-transform: uppercase;
      color: var(--secondary);

      &:not(:last-child) {
        margin-bottom: 10px;
      }
    }

    &__item {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    &__item-radio {
      width: 24px;
      height: 24px;
      border-radius: 100%;
      background-color: transparent;
      @include border(1px, var(--light-2));

      display: flex;
      align-items: center;
      justify-content: center;

      &::before {
        content: '';
        background-color: var(--primary);
        width: 12px;
        height: 12px;
        border-radius: 100%;
        display: none;
      }

      .active & {
        @include border(1px, var(--primary));

        &::before {
          display: block;
        }
      }
    }
  }
</style>

<script>
  import { modalToggle } from '@/utils/modal';
  import { getMediaCssParsedVariable, MediaSizes } from '@/utils/styles';

  let windowWidth = window.innerWidth;
  window.addEventListener('resize', () => {
    windowWidth = window.innerWidth;
  });

  document.querySelectorAll<HTMLDivElement>("[data-component='select']").forEach((select) => {
    const drawer = select.querySelector<HTMLDivElement>("[data-component='select-drawer']");
    const drawerContainer = document.getElementById('select-drawers-container') as HTMLDivElement | null;

    const closeButton = drawer?.querySelector<HTMLButtonElement>("[data-action='close']");

    if (drawer) {
      drawerContainer?.append(drawer);
    }

    const toggle = () => {
      if (getMediaCssParsedVariable(MediaSizes.MD) < windowWidth) {
        return;
      }

      modalToggle();
      drawer?.classList.toggle('opened');
    };

    select.addEventListener('click', toggle);
    closeButton?.addEventListener('click', toggle);
  });
</script>
