---
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';
import type { IFilterAccordion } from './FilterAccordion.astro';
import FilterAccordion from './FilterAccordion.astro';

type Props = Pick<HTMLAttributes<'div'>, 'class'>;

const { class: className, ...rest } = Astro.props;

const selectedFilters: string[] = ['Очистить', 'Тафетта'];

const filters: IFilterAccordion[] = [
  { label: 'Сезон', filters: ['Зима', 'Демисезон', 'Лето'] },
  { label: 'Тип рисунка', filters: ['Камуфляж', 'Гладкокрашенная'] },
  {
    label: 'Фильтр',
    filters: [
      'Непромокаемая',
      'Средняя степень защиты от влаги',
      'Нешуршащая',
      'Дышащая',
      'Капюшон',
      'защита Противомоскитная и противоэнцефалитная',
      'Морозоустойчивая',
      'Ветрозащитная',
      'патронташ',
    ],
  },
  {
    label: 'Ткань',
    filters: [
      'финляндия',
      'Рип0стоп',
      'Флис',
      'Полофлис',
      'трикотаж',
      'Палатка',
      'сорочечная',
      'Понж',
      'Таслан',
      'Алова',
      'Бязь',
      'Исландия',
      'Твил',
    ],
  },
  { label: 'Состав ткани', filters: ['100%ПЭ', '80%ПЭ, 20%ХЛ', '100%хлопок', '65%ПЭ, 35%ХЛ', '90%ПЭ, 10%ХЛ'] },
  { label: 'Подкладка', filters: ['Тафетта', 'Термостежка', 'Флис'] },
];
---

<div class='filters-modal' data-component='filters-modal'>
  <button class:list={['filters-modal__trigger', className]} data-component='filters-modal-trigger' {...rest}>
    <Icon name='filters' />
    <span>Все фильтры</span>
  </button>
  <div class='filters-modal__body' data-component='filters-modal-body'>
    <div class='filters-modal__container container'>
      <form class='filters-modal__wrapper'>
        <div class='filters-modal__top'>
          <div class='filters-modal__header modal-header' data-component='filters-modal-header'>
            <button class='filter-action-button' type='button' data-filter-action='reset'>
              <span>Сбросить</span>
              <Icon name='close' />
            </button>
            <h2 class='modal-header__title'>фильтры</h2>
            <button class='filter-action-button' type='button' data-filter-action='close'>
              <span>Закрыть</span>
              <Icon name='close' />
            </button>
          </div>
          <div class='filters-modal__content modal-content'>
            {filters.map((filter) => <FilterAccordion {...filter} />)}
          </div>
        </div>
        <div class='filters-modal__footer modal-footer' data-component='filters-modal-footer'>
          <div class='modal-footer__container container'>
            <div class='modal-footer__selected-filters'>
              {
                selectedFilters.map((filter) => (
                  <button type='button' class='modal-footer__selected-filter'>
                    {filter}
                  </button>
                ))
              }
            </div>
            <button class='modal-footer__submit'>Применить</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<style lang='scss'>
  .filter-action-button {
    height: 28px;
    padding: 6px 8px;
    border-radius: 8px;
    background-color: var(--light);

    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;

    font-family: var(--font-primary);
    font-weight: 800;
    font-size: 12px;
    text-transform: uppercase;
    color: var(--secondary);

    span {
      transform: translateY(1px);
    }

    @include media('lg') {
      padding: 10px 12px;
      height: 40px;
      font-size: 16px;
    }

    svg {
      width: 10px;
      height: 10px;
      color: var(--secondary);

      @include media('lg') {
        width: 12px;
        height: 12px;
      }
    }
  }

  .filters-modal {
    &__trigger {
      font-family: var(--font-primary);
      padding: 6px 12px;
      display: flex;
      align-items: center;
      gap: 8px;
      justify-content: center;
      background-color: transparent;
      border-radius: 8px;
      @include border(1px, var(--light-2));

      font-weight: 800;
      font-size: 12px;
      text-transform: uppercase;
      color: var(--secondary);
      height: 32px;

      @include media('md') {
        font-size: 13px;
      }

      @include media('xl') {
        font-size: 16px;
        height: 40px;
      }

      svg {
        color: var(--primary);
        width: 18px;
        height: 18px;
      }
    }

    &__container {
      @include media('lg') {
        padding: 0;
      }
    }

    &__body {
      display: none;

      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--white);
      z-index: 100;

      @include media('lg') {
        z-index: 10;
      }

      &.opened {
        display: block;

        @include media('lg') {
          position: relative;
          top: var(--scroll-y);
          height: calc(100vh - var(--header-height) - 32px);
        }
      }
    }

    &__wrapper {
      height: 100%;
    }

    &__top {
      @include media('lg') {
        width: 100%;
        padding: 16px;
        border-radius: 8px;
        overflow: hidden;
        background-color: var(--white);
        max-height: calc(100vh - var(--header-height) - var(--modal-footer-height) - 40px);
        @include border(1px, var(--light-2));
        overflow: auto;
      }
    }

    &__header {
    }

    &__content {
      margin-top: calc(40px + var(--modal-header-height));
      margin-bottom: calc(64px + var(--modal-footer-height));

      @include media('lg') {
        margin: 32px 0 0;
      }
    }

    &__footer {
    }
  }

  .modal-header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;

    padding: 8px;
    width: 100%;
    background-color: var(--white);

    display: flex;
    align-items: center;
    justify-content: space-between;

    @include media('lg') {
      position: static;
      padding: 0;
    }

    &__title {
      font-weight: 800;
      font-size: 16px;
      text-transform: uppercase;
      color: var(--secondary);

      @include media('lg') {
        font-size: 24px;
      }
    }
  }

  .modal-content {
    display: flex;
    flex-direction: column;
    gap: 24px;

    @include media('lg') {
      gap: 32px;
    }
  }

  .modal-footer {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;

    background-color: var(--light);
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
    padding: 8px 0;

    @include media('lg') {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      border-radius: 12px;
      padding: 16px 0;
    }

    &__container {
    }

    &__selected-filters {
      display: flex;
      gap: 4px;
      flex-wrap: wrap;
      margin-bottom: 8px;

      @include media('lg') {
        gap: 8px;
        margin-bottom: 16px;
      }
    }

    &__selected-filter {
      height: 32px;
      border-radius: 8px;
      background-color: var(--white);
      padding: 8px 12px;
      @include border(1px, var(--light-2));

      display: flex;
      align-items: center;
      justify-content: center;

      font-family: var(--font-primary);
      font-weight: 800;
      font-size: 12px;
      text-transform: uppercase;
      color: var(--secondary);
      transition: color 0.3s ease-in-out;

      &:hover {
        color: var(--primary);
      }

      @include media('lg') {
        height: 40px;
        font-size: 16px;
      }
    }

    &__submit {
      width: 100%;
      border-radius: 8px;
      height: 48px;
      padding: 10px 12px;
      background-color: var(--primary);

      display: flex;
      align-items: center;
      justify-content: center;

      font-family: var(--font-primary);
      font-weight: 900;
      font-style: italic;
      font-size: 20px;
      text-transform: uppercase;
      color: var(--white);

      @include media('lg') {
        height: 48px;
      }
    }
  }
</style>

<script>
  import { modalToggle } from '@/utils/modal';
  import { getMediaCssParsedVariable, MediaSizes, observeHeight, setCssVariable } from '@/utils/styles';

  const wrapper = document.querySelector<HTMLDivElement>("[data-component='filters-modal']");
  const modal = document.querySelector<HTMLDivElement>("[data-component='filters-modal-body']");

  const trigger = document.querySelector<HTMLButtonElement>("[data-component='filters-modal-trigger']");
  const header = document.querySelector<HTMLButtonElement>("[data-component='filters-modal-header']");
  const footer = document.querySelector<HTMLButtonElement>("[data-component='filters-modal-footer']");
  const inventory = document.querySelector<HTMLDivElement>("[data-component='inventory']");
  const inventoryHeader = document.querySelector<HTMLDivElement>("[data-component='inventory-header']");
  const filters = document.querySelector<HTMLDivElement>("[data-component='filters']");

  const closeButton = document.querySelector<HTMLButtonElement>("[data-filter-action='close']");

  closeButton?.addEventListener('click', () => {
    const windowWidth = window.innerWidth;
    modal?.classList.remove('opened');
    inventory?.classList.remove('opened');
    filters?.classList.remove('opened');
    if (getMediaCssParsedVariable(MediaSizes.MD) > windowWidth) {
      modalToggle();
    }
  });

  trigger?.addEventListener('click', () => {
    const windowWidth = window.innerWidth;
    modal?.classList.add('opened');
    inventory?.classList.add('opened');
    filters?.classList.add('opened');
    if (getMediaCssParsedVariable(MediaSizes.MD) > windowWidth) {
      modalToggle();
    }
  });

  observeHeight(header!, '--modal-header-height');
  observeHeight(footer!, '--modal-footer-height');

  const observeModal = () => {
    const windowWidth = window.innerWidth;

    if (wrapper && modal) {
      const isWrapperContains = wrapper.contains(modal);
      const isInventoryContains = inventoryHeader?.contains(modal);
      const isBodyContains = document.body.contains(modal);

      const mobileModal = () => {
        if (isWrapperContains || isInventoryContains) {
          document.body.append(modal);
        }
      };

      const desktopModal = () => {
        if (isWrapperContains || isBodyContains) {
          inventoryHeader?.append(modal);
        }
      };

      if (getMediaCssParsedVariable(MediaSizes.MD) > windowWidth) {
        mobileModal();
      } else {
        desktopModal();
      }
    }
  };

  observeModal();
  window.addEventListener('resize', observeModal);
  window.addEventListener('scroll', () => {
    setCssVariable('--scroll-y', `${window.scrollY}px`);
  });
</script>
